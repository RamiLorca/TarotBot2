{"ast":null,"code":"import { mapState } from 'vuex';\nimport { getTarotReading } from '@/services/ReadingService';\nexport default {\n  name: 'ChosenCards',\n  props: {\n    selectedCards: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      opacityValue: 0,\n      translateYValue: -50,\n      loading: false,\n      reading: ''\n    };\n  },\n  mounted() {\n    this.increaseOpacity();\n  },\n  methods: {\n    increaseOpacity() {\n      const duration = 5000;\n      const interval = 50;\n      const steps = duration / interval;\n      let currentStep = 0;\n      const timer = setInterval(() => {\n        currentStep++;\n        this.opacityValue = currentStep / steps;\n        if (currentStep >= steps) {\n          clearInterval(timer);\n        }\n      }, interval);\n    },\n    animateAppearance() {\n      const duration = 5000;\n      const interval = 50;\n      const steps = duration / interval;\n      let currentStep = 0;\n      const timer = setInterval(() => {\n        currentStep++;\n        const t = currentStep / steps;\n        this.opacityValue = t;\n        this.translateYValue = -50 + 150 * t;\n        if (currentStep >= steps) {\n          clearInterval(timer);\n        }\n      }, interval);\n    },\n    sendReadingRequest() {\n      this.loading = true;\n      const cardOne = this.selectedCards[0].name;\n      const cardTwo = this.selectedCards[1].name;\n      const cardThree = this.selectedCards[2].name;\n      const message = \"You will act like a master tarot reader and only respond with things a real tarot reader would say. I will list 3 cards that I've pulled from a shuffled deck \" + \"and placed in front of me from left to right. I will also provide you with a query, describing the situation \" + \"or question for which you will provide insight. You will use all available sources to provide clear and direct advice, \" + \"paying special attention to how the card meanings might change based on their relative positions. \" + \"The cards I pulled are as follows: \" + cardOne + \", \" + cardTwo + \", \" + cardThree + \". \" + \"My query/situation is as follows: \" + this.userQuery;\n      getTarotReading(message).then(response => {\n        this.tarotReading = response.data;\n      }).catch(error => {\n        console.error(\"Error fetching tarot reading:\", error);\n      }).finally(() => {});\n    },\n    updateReading(reading) {\n      this.reading = reading;\n    }\n  },\n  computed: {\n    ...mapState(['tarotReading'])\n  }\n};","map":{"version":3,"names":["mapState","getTarotReading","name","props","selectedCards","type","Array","required","data","opacityValue","translateYValue","loading","reading","mounted","increaseOpacity","methods","duration","interval","steps","currentStep","timer","setInterval","clearInterval","animateAppearance","t","sendReadingRequest","cardOne","cardTwo","cardThree","message","userQuery","then","response","tarotReading","catch","error","console","finally","updateReading","computed"],"sources":["src/components/ChosenCards.vue"],"sourcesContent":["<template>\n\n  <div \n    class=\"main\" \n    :style=\"{ \n      'transition-delay': `${index * 0.5}s`, \n      opacity: opacityValue }\"\n    @hook:mounted=\"increaseOpacity\"\n  >\n\n      <div class=\"chosen\">\n            <div \n              v-for=\"(card, index) in selectedCards\" \n              :key=\"card.name\" \n              class=\"chosen-card\">\n\n              <div class=\"card-and-name\" :style=\"{ opacity: opacityValue }\">\n                <div class=\"card-name\">{{ card.name }}</div>\n                <img :src=\"card.imgUrl\" :alt=\"card.name\">\n              </div>\n\n            </div>\n      </div>\n\n          <v-card class=\"tarot-reading\">\n            <v-btn \n              dark \n              elevated \n              style=\"color: #161623;background-color: #d2cfd2\"\n              :disabled=\"loading\"\n              :loading=\"loading\"\n              class=\"text-none mb-4\"\n              size=\"large\"\n              variant=\"flat\" \n              @click=\"sendReadingRequest\"\n              vif=\"!tarotReading\"\n            >\n              Get My Reading\n            </v-btn>\n\n            <v-card-text class=\"text-white\" style=\"font-size:16px; text-align:left;\"> \n              {{ tarotReading }}\n            </v-card-text>\n        </v-card>\n  </div>\n\n</template>\n\n<script>\n\nimport { mapState } from 'vuex';\nimport { getTarotReading } from '@/services/ReadingService';\n\nexport default {\n  name: 'ChosenCards',\n  props: {\n    selectedCards: {\n      type: Array,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      opacityValue: 0,\n      translateYValue: -50,\n      loading: false,\n      reading: '',\n    };\n  },\n  mounted() {\n    this.increaseOpacity();\n  },\n  methods: {\n    increaseOpacity() {\n      const duration = 5000;\n      const interval = 50;\n      const steps = duration / interval;\n      let currentStep = 0;\n\n      const timer = setInterval(() => {\n        currentStep++;\n        this.opacityValue = currentStep / steps;\n\n        if(currentStep >= steps) {\n          clearInterval(timer);\n        }\n      }, interval);\n    },\n    animateAppearance() {\n      const duration = 5000;\n      const interval = 50;\n      const steps = duration / interval;\n      let currentStep = 0;\n\n      const timer = setInterval(() => {\n        currentStep++;\n        const t = currentStep / steps;\n        this.opacityValue = t;\n        this.translateYValue = -50 + 150 * t;\n\n        if (currentStep >= steps) {\n          clearInterval(timer);\n        }\n      }, interval);\n    },\n    sendReadingRequest() {\n      this.loading = true;\n      const cardOne = this.selectedCards[0].name;\n      const cardTwo = this.selectedCards[1].name;\n      const cardThree = this.selectedCards[2].name;\n        \n      const message = \"You will act like a master tarot reader and only respond with things a real tarot reader would say. I will list 3 cards that I've pulled from a shuffled deck \" +\n                    \"and placed in front of me from left to right. I will also provide you with a query, describing the situation \" +\n                    \"or question for which you will provide insight. You will use all available sources to provide clear and direct advice, \" +\n                    \"paying special attention to how the card meanings might change based on their relative positions. \" +\n                    \n                    \"The cards I pulled are as follows: \" + cardOne + \", \" + cardTwo + \", \" + cardThree + \". \" +\n\n                    \"My query/situation is as follows: \" + this.userQuery;\n\n      getTarotReading(message)\n        .then((response) => {\n          this.tarotReading = response.data;\n        })\n        .catch((error) => {\n          console.error(\"Error fetching tarot reading:\", error);\n        })\n        .finally(() => {\n          \n        })\n    },\n    updateReading(reading) {\n        this.reading = reading;\n    },\n  },\n  computed: {\n      ...mapState(['tarotReading'])\n  },\n}\n</script>\n\n<style scoped>\n\n.horizontal-group {\n  display: flex;\n}\n.main {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 20%;\n  max-width: 90%;\n  gap: 40px;\n}\n\n.chosen {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    margin: 0;\n    padding: 0;\n}\n\n.chosen div img {\n  width: 80%;\n  min-height: 200px;\n  max-height: 450px;\n  background-color: rgb(189, 180, 165);\n  border-radius: 15px;\n}\n\n.chosen-card {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.chosen-card img {\n  width: 80%;\n  min-height: 200px;\n  max-height: 450px;\n  background-color: rgb(189, 180, 165);\n  border-radius: 15px;\n}\n\n.fade-in-enter-active, .fade-in-leave-active {\n  transition: opacity 1s ease, transform 1s ease;\n}\n\n.fade-in-enter, .fade-in-leave-to {\n  opacity: 1;\n  transform: translateX(0);\n}\n\n.card-name {\n  margin-bottom: 8px;\n  text-transform: uppercase;\n  font-family: 'EB Garamond';\n  font-weight: bold;\n  color: #d1cfd2;\n}\n\n.card-and-name {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  gap: 10px;\n}\n\n.tarot-reading {\n  background-color: transparent !important;\n}\n</style>"],"mappings":"AAkDA,SAAAA,QAAA;AACA,SAAAC,eAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,aAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,eAAA;MACAC,OAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,eAAA;EACA;EACAC,OAAA;IACAD,gBAAA;MACA,MAAAE,QAAA;MACA,MAAAC,QAAA;MACA,MAAAC,KAAA,GAAAF,QAAA,GAAAC,QAAA;MACA,IAAAE,WAAA;MAEA,MAAAC,KAAA,GAAAC,WAAA;QACAF,WAAA;QACA,KAAAV,YAAA,GAAAU,WAAA,GAAAD,KAAA;QAEA,IAAAC,WAAA,IAAAD,KAAA;UACAI,aAAA,CAAAF,KAAA;QACA;MACA,GAAAH,QAAA;IACA;IACAM,kBAAA;MACA,MAAAP,QAAA;MACA,MAAAC,QAAA;MACA,MAAAC,KAAA,GAAAF,QAAA,GAAAC,QAAA;MACA,IAAAE,WAAA;MAEA,MAAAC,KAAA,GAAAC,WAAA;QACAF,WAAA;QACA,MAAAK,CAAA,GAAAL,WAAA,GAAAD,KAAA;QACA,KAAAT,YAAA,GAAAe,CAAA;QACA,KAAAd,eAAA,eAAAc,CAAA;QAEA,IAAAL,WAAA,IAAAD,KAAA;UACAI,aAAA,CAAAF,KAAA;QACA;MACA,GAAAH,QAAA;IACA;IACAQ,mBAAA;MACA,KAAAd,OAAA;MACA,MAAAe,OAAA,QAAAtB,aAAA,IAAAF,IAAA;MACA,MAAAyB,OAAA,QAAAvB,aAAA,IAAAF,IAAA;MACA,MAAA0B,SAAA,QAAAxB,aAAA,IAAAF,IAAA;MAEA,MAAA2B,OAAA,sKACA,kHACA,4HACA,uGAEA,wCAAAH,OAAA,UAAAC,OAAA,UAAAC,SAAA,UAEA,4CAAAE,SAAA;MAEA7B,eAAA,CAAA4B,OAAA,EACAE,IAAA,CAAAC,QAAA;QACA,KAAAC,YAAA,GAAAD,QAAA,CAAAxB,IAAA;MACA,GACA0B,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,kCAAAA,KAAA;MACA,GACAE,OAAA,QAEA;IACA;IACAC,cAAA1B,OAAA;MACA,KAAAA,OAAA,GAAAA,OAAA;IACA;EACA;EACA2B,QAAA;IACA,GAAAvC,QAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}