{"ast":null,"code":"import { Carousel3d, Slide } from \"vue-carousel-3d\";\nimport { mapGetters, mapActions, mapState } from 'vuex';\nexport default {\n  name: 'TarotCards',\n  props: {\n    isVisible: {\n      type: Boolean,\n      required: true\n    },\n    incrementProgressBar: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isContracted: false,\n      loading: false,\n      touchStartX: 0,\n      touchMoveX: 0,\n      isSliding: false,\n      slideThreshold: 50,\n      windowWidth: window.innerWidth\n    };\n  },\n  components: {\n    Carousel3d,\n    Slide\n  },\n  mounted() {\n    const carouselElement = this.$refs.carousel.$el;\n    carouselElement.addEventListener('touchstart', this.onTouchStart);\n    carouselElement.addEventListener('touchmove', this.onTouchMove);\n    carouselElement.addEventListener('touchend', this.onTouchEnd);\n    window.addEventListener('resize', this.handleResize);\n  },\n  // beforeUnmount() {\n  //   const carouselElement = this.$refs.carousel.$el;\n  //   carouselElement.removeEventListener('touchstart', this.onTouchStart);\n  //   carouselElement.removeEventListener('touchmove', this.onTouchMove);\n  //   carouselElement.removeEventListener('touchend', this.onTouchEnd);\n  // },\n  computed: {\n    ...mapGetters(['allTarotCards', 'selectedCards']),\n    ...mapState(['userQuery']),\n    mainDeck() {\n      return this.allTarotCards;\n    },\n    mainDeckLength() {\n      return this.allTarotCards.length;\n    },\n    selectedCardsCount() {\n      return this.$store.state.selectedCardsCount;\n    },\n    isVisibleCarousel() {\n      return this.windowWidth < 720;\n    }\n  },\n  created() {\n    this.$store.dispatch('fetchTarotDeck');\n  },\n  methods: {\n    ...mapActions(['shuffleMainDeck', 'moveToSelectedCards', 'incrementSelectedCardsCount']),\n    shuffleDeck() {\n      this.loading = true;\n      this.isContracted = true;\n      setTimeout(() => {\n        this.shuffleMainDeck();\n        this.isContracted = false;\n        this.loading = false;\n      }, 2000);\n      console.log(this.mainDeck);\n    },\n    moveCardToSelected(card) {\n      if (this.selectedCardsCount < 3) {\n        this.moveToSelectedCards(card);\n        this.incrementSelectedCardsCount();\n      }\n      if (this.selectedCardsCount === 3) {\n        this.incrementProgressBar();\n        this.$store.commit('hideTarotCards');\n      }\n    },\n    onTouchStart(event) {\n      this.touchStartX = event.touches[0].clientX;\n      this.isSliding = true;\n    },\n    onTouchMove(event) {\n      if (this.isSliding) {\n        this.touchMoveX = event.touches[0].clientX;\n        const diff = this.touchMoveX - this.touchStartX;\n        if (Math.abs(diff) > this.slideThreshold) {\n          this.isSliding = false;\n          if (diff > 0) {\n            this.$refs.carousel.prev();\n          } else {\n            this.$refs.carousel.next();\n          }\n        }\n      }\n    },\n    onTouchEnd() {\n      this.isSliding = false;\n    },\n    handleResize() {\n      this.windowWidth = window.innerWidth;\n    }\n  }\n};","map":{"version":3,"names":["Carousel3d","Slide","mapGetters","mapActions","mapState","name","props","isVisible","type","Boolean","required","incrementProgressBar","Function","data","isContracted","loading","touchStartX","touchMoveX","isSliding","slideThreshold","windowWidth","window","innerWidth","components","mounted","carouselElement","$refs","carousel","$el","addEventListener","onTouchStart","onTouchMove","onTouchEnd","handleResize","computed","mainDeck","allTarotCards","mainDeckLength","length","selectedCardsCount","$store","state","isVisibleCarousel","created","dispatch","methods","shuffleDeck","setTimeout","shuffleMainDeck","console","log","moveCardToSelected","card","moveToSelectedCards","incrementSelectedCardsCount","commit","event","touches","clientX","diff","Math","abs","prev","next"],"sources":["src/components/TarotCards.vue"],"sourcesContent":["<template>\n    <div class=\"main\" >\n\n      <v-btn \n        dark \n        elevated \n        style=\"color: #161623;background-color: #d2cfd2\"\n        :disabled=\"loading\"\n        :loading=\"loading\"\n        class=\"text-none mb-4\"\n        size=\"large\"\n        variant=\"flat\" \n        @click=\"shuffleDeck\"\n      >\n        Shuffle\n      </v-btn>\n\n        <div :class=\"{'contracted': isContracted}\" class=\"card-list-wrapper\">\n          <transition class=\"fade-in\">\n            <section class=\"card-list\" v-if=\"isVisible\">\n              <article class=\"card\" v-for=\"card in mainDeck\" :key=\"card.name\" @click=\"moveCardToSelected(card)\">\n                  <div class=\"card-img\" >\n                      <img src=\"@/assets/Back5.png\" alt=\"back-of-card\">\n                  </div>\n              </article>\n            </section>\n        </transition>\n      </div>\n\n\n\n      <carousel-3d v-if=\"windowWidth\" :width=\"180\" :height=\"290\" style=\"margin-top:30px displa\" ref=\"carousel\" >\n\n        <slide class=\"carousel-slide\" v-for=\"(card, i) in mainDeck\" :index=\"i\" :key=\"card.name\">\n          <figure class=\"carousel-figure\" @click=\"moveCardToSelected(card)\">\n              <div class=\"carousel-card\" >\n                <img src=\"@/assets/Back5.png\" alt=\"back-of-card\">\n              </div>\n          </figure>\n        </slide>\n\n      </carousel-3d>\n\n      <!-- <div class=\"sliding-bar\" v-if=\"isVisibleCarousel\">\n        <div class=\"slider\" :style=\"{ width: `${(selectedCardsCount / mainDeckLength) * 100}%` }\"></div>\n      </div> -->\n\n\n    </div>\n</template>\n\n<script>\nimport { Carousel3d, Slide } from \"vue-carousel-3d\";\nimport { mapGetters, mapActions, mapState } from 'vuex';\n\nexport default {\n    name: 'TarotCards',\n    props: {\n      isVisible: {\n        type: Boolean,\n        required: true,\n      },\n      incrementProgressBar: {\n        type: Function,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        isContracted: false,\n        loading: false,\n        touchStartX: 0,\n        touchMoveX: 0,\n        isSliding: false,\n        slideThreshold: 50,\n        windowWidth: window.innerWidth,\n      };\n    },\n    components: {\n      Carousel3d,\n      Slide,\n    },\n    mounted() {\n      const carouselElement = this.$refs.carousel.$el;\n      carouselElement.addEventListener('touchstart', this.onTouchStart);\n      carouselElement.addEventListener('touchmove', this.onTouchMove);\n      carouselElement.addEventListener('touchend', this.onTouchEnd);\n      window.addEventListener('resize', this.handleResize);\n    },\n    // beforeUnmount() {\n    //   const carouselElement = this.$refs.carousel.$el;\n    //   carouselElement.removeEventListener('touchstart', this.onTouchStart);\n    //   carouselElement.removeEventListener('touchmove', this.onTouchMove);\n    //   carouselElement.removeEventListener('touchend', this.onTouchEnd);\n    // },\n    computed: {\n        ...mapGetters(['allTarotCards', 'selectedCards']),\n        ...mapState(['userQuery']),\n        mainDeck() {\n            return this.allTarotCards;\n        },\n        mainDeckLength() {\n          return this.allTarotCards.length;\n        },\n        selectedCardsCount() {\n          return this.$store.state.selectedCardsCount;\n        },\n        isVisibleCarousel() {\n          return this.windowWidth < 720;\n        },\n    },\n    created() {\n        this.$store.dispatch('fetchTarotDeck');\n    },\n    methods: {\n      ...mapActions(['shuffleMainDeck', 'moveToSelectedCards', 'incrementSelectedCardsCount']),\n      shuffleDeck() {\n        this.loading = true;\n        this.isContracted = true;\n        setTimeout(() => {\n          this.shuffleMainDeck();\n          this.isContracted = false;\n          this.loading = false;\n        }, 2000);\n        console.log(this.mainDeck);\n      },\n      moveCardToSelected(card) {\n        if (this.selectedCardsCount < 3) {\n          this.moveToSelectedCards(card);\n          this.incrementSelectedCardsCount();\n        }\n        if(this.selectedCardsCount === 3) {\n          this.incrementProgressBar();\n          this.$store.commit('hideTarotCards');\n        }\n      },\n      onTouchStart(event) {\n        this.touchStartX = event.touches[0].clientX;\n        this.isSliding = true;\n      },\n      onTouchMove(event) {\n        if (this.isSliding) {\n          this.touchMoveX = event.touches[0].clientX;\n          const diff = this.touchMoveX - this.touchStartX;\n          if (Math.abs(diff) > this.slideThreshold) {\n            this.isSliding = false;\n            if (diff > 0) {\n              this.$refs.carousel.prev();\n            } else {\n              this.$refs.carousel.next();\n            }\n          }\n        }\n      },\n      onTouchEnd() {\n        this.isSliding = false;\n      },\n      handleResize() {\n        this.windowWidth = window.innerWidth;\n      },\n    },\n};\n</script>\n\n<style>\n\n.main {\n    padding: 0;\n    margin: 0;\n    background-color: #161623;\n    color: white;\n    font-family: 'DM Mono', monospace;\n    max-width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-family: Avenir;\n}\n\na {\n    text-decoration: none;\n}\n\n.buttons {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  gap: 10%;\n}\n\n.card-list {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding-left: 7%;\n    padding-right: 5%;\n    padding-bottom: 5%;\n    height: 100%;\n    max-width: 90%;\n    margin: auto;\n    box-sizing: border-box;\n}\n\n.card-list::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n.card-list-wrapper {\n  max-width: 100%;\n  animation-duration: 2s; \n  animation-timing-function: ease-in-out;\n}\n\n@keyframes accordion-effect {\n  0% {\n    max-width: 100%;\n  }\n  50% {\n    max-width: 20%;\n  }\n  100% {\n    max-width: 100%;\n  }\n}\n.card-list-wrapper.contracted {\n  animation-name: accordion-effect;\n}\n\n.card {\n    height: auto;\n    max-width: 140px;\n    padding: 1.5rem;\n    border-radius: 10%;\n    background: #2c2461;\n    box-shadow: -30px 0px 25px -30px rgba(0,0,0,0.63);\n    display: flex;\n    flex-direction: column;;\n    transition: .2s;\n    margin: 40px 0;\n    padding: 0;\n    clear: both;\n    position: relative;\n    overflow: hidden;\n    border: .5px solid #e0dddf;\n}\n\n\n.card-img {\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.card-img img {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n}\n\n.card:hover {\n    transform: translateY(3rem) translateX(-1rem);\n    box-shadow: 0 0px 20px 10px rgba(255, 255, 255, 0.168) inset;\n    box-shadow: 0 0px 20px 5px rgba(255, 255, 255, 0.168);\n    cursor: pointer;\n}\n\n.card:not(:first-child) {\n    margin-left: -119px;\n} \n\n\n@media (max-width: 1120px) {\n  .card-list {\n    padding-left: 13%;\n  }\n}\n\n@media (max-width: 800px) {\n  .card-list {\n    padding-left: 21%;\n  }\n}\n\n@media (min-width: 720px) {\n  .carousel-3d {\n    display: none !important;\n  }\n\n  .sliding-bar {\n    display: none;\n  }\n}\n\n@media (max-width: 720px) {\n    .card-list-wrapper {\n      display: none;\n    }\n\n    .carousel-3d {\n      display: flex !important;\n    }\n\n    .carousel-3d-container figure {\n      margin: 0;\n    }\n\n    .carousel-slide {\n      border-radius: 10% !important;\n      width: auto;\n    }\n\n    .carousel-card {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;   \n    }\n\n    .carousel-card img {\n      background-color: #2c2460;\n      object-fit: cover;\n      width: 100%;\n      height: 100%;\n    }\n\n    .sliding-bar {\n      width: 100%;\n      height: 5px;\n      background-color: #4f4e5e;\n      position: relative;\n      margin-top: 10px;\n    }\n\n    .slider {\n      height: 100%;\n      background-color: #d2cfd2;\n      transition: width 0.3s ease;\n    }\n\n}\n\n/* @media (max-width: 600px) {\n  .card {\n    margin: 20px 5px;\n  }\n} */\n\n</style>"],"mappings":"AAoDA,SAAAA,UAAA,EAAAC,KAAA;AACA,SAAAC,UAAA,EAAAC,UAAA,EAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,QAAA;IACA;IACAC,oBAAA;MACAH,IAAA,EAAAI,QAAA;MACAF,QAAA;IACA;EACA;EACAG,KAAA;IACA;MACAC,YAAA;MACAC,OAAA;MACAC,WAAA;MACAC,UAAA;MACAC,SAAA;MACAC,cAAA;MACAC,WAAA,EAAAC,MAAA,CAAAC;IACA;EACA;EACAC,UAAA;IACAvB,UAAA;IACAC;EACA;EACAuB,QAAA;IACA,MAAAC,eAAA,QAAAC,KAAA,CAAAC,QAAA,CAAAC,GAAA;IACAH,eAAA,CAAAI,gBAAA,oBAAAC,YAAA;IACAL,eAAA,CAAAI,gBAAA,mBAAAE,WAAA;IACAN,eAAA,CAAAI,gBAAA,kBAAAG,UAAA;IACAX,MAAA,CAAAQ,gBAAA,gBAAAI,YAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,QAAA;IACA,GAAAhC,UAAA;IACA,GAAAE,QAAA;IACA+B,SAAA;MACA,YAAAC,aAAA;IACA;IACAC,eAAA;MACA,YAAAD,aAAA,CAAAE,MAAA;IACA;IACAC,mBAAA;MACA,YAAAC,MAAA,CAAAC,KAAA,CAAAF,kBAAA;IACA;IACAG,kBAAA;MACA,YAAAtB,WAAA;IACA;EACA;EACAuB,QAAA;IACA,KAAAH,MAAA,CAAAI,QAAA;EACA;EACAC,OAAA;IACA,GAAA1C,UAAA;IACA2C,YAAA;MACA,KAAA/B,OAAA;MACA,KAAAD,YAAA;MACAiC,UAAA;QACA,KAAAC,eAAA;QACA,KAAAlC,YAAA;QACA,KAAAC,OAAA;MACA;MACAkC,OAAA,CAAAC,GAAA,MAAAf,QAAA;IACA;IACAgB,mBAAAC,IAAA;MACA,SAAAb,kBAAA;QACA,KAAAc,mBAAA,CAAAD,IAAA;QACA,KAAAE,2BAAA;MACA;MACA,SAAAf,kBAAA;QACA,KAAA5B,oBAAA;QACA,KAAA6B,MAAA,CAAAe,MAAA;MACA;IACA;IACAzB,aAAA0B,KAAA;MACA,KAAAxC,WAAA,GAAAwC,KAAA,CAAAC,OAAA,IAAAC,OAAA;MACA,KAAAxC,SAAA;IACA;IACAa,YAAAyB,KAAA;MACA,SAAAtC,SAAA;QACA,KAAAD,UAAA,GAAAuC,KAAA,CAAAC,OAAA,IAAAC,OAAA;QACA,MAAAC,IAAA,QAAA1C,UAAA,QAAAD,WAAA;QACA,IAAA4C,IAAA,CAAAC,GAAA,CAAAF,IAAA,SAAAxC,cAAA;UACA,KAAAD,SAAA;UACA,IAAAyC,IAAA;YACA,KAAAjC,KAAA,CAAAC,QAAA,CAAAmC,IAAA;UACA;YACA,KAAApC,KAAA,CAAAC,QAAA,CAAAoC,IAAA;UACA;QACA;MACA;IACA;IACA/B,WAAA;MACA,KAAAd,SAAA;IACA;IACAe,aAAA;MACA,KAAAb,WAAA,GAAAC,MAAA,CAAAC,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}