{"ast":null,"code":"import { mapState } from 'vuex';\nimport ChosenCards from './ChosenCards.vue';\nexport default {\n  name: 'UserPrompts',\n  components: {\n    ChosenCards\n  },\n  data() {\n    return {\n      currentProgress: 1,\n      reading: ''\n    };\n  },\n  methods: {\n    incrementProgressBar() {\n      const circles = document.querySelectorAll(\".circle\");\n      const progress = document.getElementById(\"progress\");\n      this.currentProgress++;\n      circles.forEach((circle, index) => {\n        if (index < this.currentProgress) {\n          circle.classList.add(\"active\");\n        }\n      });\n      const actives = document.querySelectorAll(\".active\");\n      progress.style.width = (actives.length - 1) / (circles.length - 1) * 100 + \"%\";\n    },\n    updateReading(reading) {\n      this.reading = reading;\n    }\n  },\n  computed: {\n    ...mapState(['tarotReading', 'selectedCardsCount', 'selectedCards', 'showChosenCards']),\n    progressBarWidth() {\n      const circles = document.querySelectorAll(\".circle\");\n      return (this.currentProgress - 1) / (circles.length - 1) * 100 + \"%\";\n    },\n    showChosenCards() {\n      return this.$store.state.selectedCardsCount === 3;\n    },\n    selectedCards() {\n      return this.$store.getters.selectedCards;\n    }\n  }\n};","map":{"version":3,"names":["mapState","ChosenCards","name","components","data","currentProgress","reading","methods","incrementProgressBar","circles","document","querySelectorAll","progress","getElementById","forEach","circle","index","classList","add","actives","style","width","length","updateReading","computed","progressBarWidth","showChosenCards","$store","state","selectedCardsCount","selectedCards","getters"],"sources":["src/components/UserPrompts.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n\n    <div class=\"container\">\n      <div class=\"progress-container\">\n        <div class=\"progress\" id=\"progress\" ></div>\n        <div class=\"circle active\">1</div>\n        <div class=\"circle\">2</div>\n        <div class=\"circle\">3</div>\n      </div>\n    </div>\n\n    <Transition name=\"fade-in-card\">\n      <ChosenCards v-if=\"showChosenCards\" :selectedCards=\"selectedCards\" />\n    </Transition>\n\n    <v-card>\n\n      <!-- <ChosenCards v-if=\"showChosenCards\" :selectedCards=\"selectedCards\" /> -->\n\n      <v-card-text class=\"text-white\" style=\"font-size:16px; text-align:left;\" v-if=\"currentProgress === 1\">\n        Welcome to Tarot Bot, your virtual tarot reader! \n        <br><br> \n        Let's get started. First, think of something to ask and enter it below.\n        When you're ready to pick your cards, submit your query.\n      </v-card-text>\n\n      <v-card-text class=\"text-white\" style=\"font-size:16px; text-align:left;\" v-else-if=\"currentProgress === 2\">\n        Let's proceed. \n        <br><br> \n        Now shuffle the deck as many times as you want and select three cards. Then submit your cards to receive your reading.  \n        <br><br>\n        You've selected: {{ selectedCardsCount }} / 3 cards.\n      </v-card-text>\n\n      <!-- <v-card-text class=\"text-white final-reading\" style=\"font-size:16px; text-align:left;\" v-else>\n\n        <div class=\"final-reading\">\n            {{ tarotReading }}\n        </div>\n\n      </v-card-text> -->\n\n    </v-card>\n\n    <div class=\"\"loader\" v-if=\"!tarotReading\">\n      <div class=\"spinner\"></div>\n    </div>\n\n    <Transition name=\"fade-in\">\n      <v-card class=\"final-reading\" v-if=\"currentProgress === 3\">\n        <v-card-text class=\"text-white final-reading\" style=\"font-size:16px; text-align:left;\">\n          {{ tarotReading }}\n        </v-card-text>\n      </v-card>\n    </Transition>\n\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport ChosenCards from './ChosenCards.vue';\n\nexport default {\n    name: 'UserPrompts',\n    components: {\n      ChosenCards,\n    },\n    data() {\n      return {\n        currentProgress: 1,\n        reading: '',\n      };\n    },\n    methods: {\n      incrementProgressBar() {\n        const circles = document.querySelectorAll(\".circle\");\n        const progress = document.getElementById(\"progress\");\n        this.currentProgress++;\n\n          circles.forEach((circle, index) => {\n            if(index < this.currentProgress) {\n              circle.classList.add(\"active\");\n            }\n          });\n          const actives = document.querySelectorAll(\".active\");\n          progress.style.width = \n            ((actives.length - 1) / (circles.length - 1)) * 100 + \"%\";  \n      },\n      updateReading(reading) {\n        this.reading = reading;\n      },\n    },\n    computed: {\n      ...mapState(['tarotReading', 'selectedCardsCount', 'selectedCards', 'showChosenCards']),\n      progressBarWidth() {\n        const circles = document.querySelectorAll(\".circle\");\n        return ((this.currentProgress - 1) / (circles.length - 1)) * 100 + \"%\";\n      },\n      showChosenCards() {\n        return this.$store.state.selectedCardsCount === 3;\n      },\n      selectedCards() {\n        return this.$store.getters.selectedCards;\n      },\n    },\n}\n</script>\n\n<style scoped>\n\n\n.main {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  overflow: hidden;\n  margin: 1% auto;\n  background-color: #161623;\n}\n\n:root {\n  --line-border-fill: #d1cfd2;\n  --line-border-empty: #5c5464 ;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  margin: auto;\n}\n\n.progress-container {\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n  margin: auto auto 2% auto;\n  max-width: 100%;\n  width: 350px;\n}\n\n.container .progress-container::before {\n  content: \"\"; /* Mandatory with ::before */\n  background-color: #5c5464;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  height: 4px;\n  width: 100%;\n}\n\n#progress {\n  background-color: #d1cfd2;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  height: 4px;\n  width: 0%;\n  z-index: 1;\n  transition: 0.4s ease;\n}\n\n.container .circle {\n  background-color: #161623;\n  color: #949296;\n  border-radius: 50%;\n  height: 30px;\n  width: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 3px solid #5c5464;\n  transition: 0.4s ease;\n  z-index: 1;\n}\n\n.container .circle.active {\n  border-color: #d1cfd2;\n  background-color: #d1cfd2;\n  color: #161623;\n  font-weight: bolder;\n}\n\n.v-card {\n  background-color: transparent !important;\n  box-shadow: none !important;\n  font-family: 'Muli', sans-serif !important;\n  margin: auto;\n  height: auto;\n  max-width: 45%;\n  min-width: 350px;\n}\n\n.spinner {\n  width: 20px;\n  height: 20px;\n  border: 2px solid transparent;\n  border-top-color: #fff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.final-reading {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: 45%;\n  min-width: 350px;\n}\n\n.fade-in-enter-active, .fade-in-leave-active,\n.fade-in-card-enter-active, .fade-in-card-leave-active {\n  transition: opacity 6s ease;\n}\n\n.fade-in-enter, .fade-in-leave-to,\n.fade-in-card-enter, .fade-in-card-leave-to {\n  opacity: 0;\n}\n\n</style>"],"mappings":"AA6DA,SAAAA,QAAA;AACA,OAAAC,WAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,eAAA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,qBAAA;MACA,MAAAC,OAAA,GAAAC,QAAA,CAAAC,gBAAA;MACA,MAAAC,QAAA,GAAAF,QAAA,CAAAG,cAAA;MACA,KAAAR,eAAA;MAEAI,OAAA,CAAAK,OAAA,EAAAC,MAAA,EAAAC,KAAA;QACA,IAAAA,KAAA,QAAAX,eAAA;UACAU,MAAA,CAAAE,SAAA,CAAAC,GAAA;QACA;MACA;MACA,MAAAC,OAAA,GAAAT,QAAA,CAAAC,gBAAA;MACAC,QAAA,CAAAQ,KAAA,CAAAC,KAAA,GACA,CAAAF,OAAA,CAAAG,MAAA,SAAAb,OAAA,CAAAa,MAAA;IACA;IACAC,cAAAjB,OAAA;MACA,KAAAA,OAAA,GAAAA,OAAA;IACA;EACA;EACAkB,QAAA;IACA,GAAAxB,QAAA;IACAyB,iBAAA;MACA,MAAAhB,OAAA,GAAAC,QAAA,CAAAC,gBAAA;MACA,aAAAN,eAAA,SAAAI,OAAA,CAAAa,MAAA;IACA;IACAI,gBAAA;MACA,YAAAC,MAAA,CAAAC,KAAA,CAAAC,kBAAA;IACA;IACAC,cAAA;MACA,YAAAH,MAAA,CAAAI,OAAA,CAAAD,aAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}